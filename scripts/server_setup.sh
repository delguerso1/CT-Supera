#!/bin/bash
# Script para preparar o servidor para CI/CD
# Execute este script NO SERVIDOR (Hostinger)

set -e

echo "üîß Preparando servidor para CI/CD"
echo "===================================="
echo ""

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then 
    echo "‚ùå Por favor, execute como root (use sudo)"
    exit 1
fi

# Criar diret√≥rio de backups
echo "üìÅ Criando diret√≥rio de backups..."
mkdir -p /root/backups
chmod 700 /root/backups
echo "‚úÖ Diret√≥rio de backups criado: /root/backups"

# Instalar rsync (se n√£o estiver instalado)
echo ""
echo "üì¶ Verificando rsync..."
if ! command -v rsync &> /dev/null; then
    echo "Instalando rsync..."
    apt-get update
    apt-get install -y rsync
    echo "‚úÖ rsync instalado!"
else
    echo "‚úÖ rsync j√° est√° instalado"
fi

# Criar script de limpeza de backups antigos
echo ""
echo "üìù Criando script de limpeza de backups..."
cat > /root/cleanup_backups.sh << 'EOF'
#!/bin/bash
# Mant√©m apenas os √∫ltimos 10 backups

cd /root/backups
backup_count=$(ls -1 ct-supera-backup-*.tar.gz 2>/dev/null | wc -l)

if [ $backup_count -gt 10 ]; then
    echo "Limpando backups antigos..."
    ls -t ct-supera-backup-*.tar.gz | tail -n +11 | xargs -r rm
    echo "‚úÖ Backups antigos removidos. Mantidos os 10 mais recentes."
else
    echo "‚ÑπÔ∏è Apenas $backup_count backups encontrados. Nada a remover."
fi
EOF

chmod +x /root/cleanup_backups.sh
echo "‚úÖ Script de limpeza criado: /root/cleanup_backups.sh"

# Configurar cron para limpeza autom√°tica (di√°ria √†s 3am)
echo ""
echo "‚è∞ Configurando limpeza autom√°tica de backups..."
(crontab -l 2>/dev/null | grep -v cleanup_backups.sh; echo "0 3 * * * /root/cleanup_backups.sh >> /root/backups/cleanup.log 2>&1") | crontab -
echo "‚úÖ Cron configurado para limpeza di√°ria √†s 3h"

# Verificar permiss√µes do diret√≥rio do projeto
echo ""
echo "üîê Verificando permiss√µes..."
if [ -d "/root/ct-supera" ]; then
    chown -R root:root /root/ct-supera
    chmod -R 755 /root/ct-supera
    echo "‚úÖ Permiss√µes configuradas"
else
    echo "‚ö†Ô∏è Diret√≥rio /root/ct-supera n√£o encontrado"
fi

# Verificar servi√ßos
echo ""
echo "üîç Verificando servi√ßos..."
services=("ctsupera" "nginx" "postgresql")
for service in "${services[@]}"; do
    if systemctl is-active --quiet $service; then
        echo "‚úÖ $service est√° rodando"
    else
        echo "‚ùå $service N√ÉO est√° rodando"
    fi
done

# Criar backup inicial
echo ""
echo "üì¶ Criando backup inicial..."
if [ -d "/root/ct-supera" ]; then
    cd /root
    timestamp=$(date +%Y%m%d-%H%M%S)
    tar -czf backups/ct-supera-backup-initial-$timestamp.tar.gz ct-supera/
    echo "‚úÖ Backup inicial criado: ct-supera-backup-initial-$timestamp.tar.gz"
else
    echo "‚ö†Ô∏è Diret√≥rio do projeto n√£o encontrado. Pulando backup."
fi

# Verificar chaves SSH autorizadas
echo ""
echo "üîë Verificando chaves SSH..."
if [ -f "/root/.ssh/authorized_keys" ]; then
    key_count=$(grep -c "^ssh-" /root/.ssh/authorized_keys 2>/dev/null || echo "0")
    echo "‚úÖ Encontradas $key_count chaves autorizadas"
else
    echo "‚ö†Ô∏è Arquivo authorized_keys n√£o encontrado"
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
    echo "‚úÖ Criado /root/.ssh/authorized_keys"
fi

echo ""
echo "========================================"
echo "‚úÖ Servidor preparado para CI/CD!"
echo "========================================"
echo ""
echo "üìä Resumo:"
echo "- Diret√≥rio de backups: /root/backups"
echo "- Script de limpeza: /root/cleanup_backups.sh"
echo "- Limpeza autom√°tica: Di√°ria √†s 3h"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "1. Adicione a chave p√∫blica SSH do GitHub Actions em:"
echo "   /root/.ssh/authorized_keys"
echo "2. Configure os secrets no GitHub"
echo "3. Fa√ßa push para a branch main para testar o deploy"
echo ""
echo "Para ver os backups: ls -lht /root/backups/"
echo "Para executar limpeza manual: /root/cleanup_backups.sh"

